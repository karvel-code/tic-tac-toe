#!/usr/bin/env ruby
require_relative '../lib/player'
require_relative '../lib/gameplay'
# User Interface
puts "WELCOME TO RUBY'S TIC TAC TOE GAME"

puts 'Enter Player One name:'
player_one = gets.chomp
player1 = Player.new(player_one, 'X')
puts "Hello #{player1.name} you will be playing with #{player1.symbol}."

puts 'Enter Player Two name:'
player_two = gets.chomp
player2 = Player.new(player_two, 'O')
puts "Hello #{player_two} you will be playing with #{player2.symbol}."

# def player_info(player1, player2)
#   puts "PLayer 1 is #{player1.name} and symbol is #{player1.symbol}"
#   puts "PLayer 2 is #{player2.name} and symbol is #{player2.symbol}"
# end

# player_info(player1, player2)




def validate(move_play)
  move_play = move_play.to_i
  if move_play < 10 && move_play.positive?
    true
  else
    false
  end
end

# Board
def display_board(board)
  user_input = []
  board.each do |x|
    if x.is_a? Integer and x.zero?
      user_input.push(' ')
    else
      user_input.push(x)
    end
  end
  puts " #{board[0]} | #{board[1]} | #{board[2]} "
  puts '-----------'
  puts " #{board[3]} | #{board[4]} | #{board[5]} "
  puts '-----------'
  puts " #{board[6]} | #{board[7]} | #{board[8]} "
end
new_board = []
9.times { new_board.push(0) }



board = %w[1 2 3 4 5 6 7 8 9]
display_board(board)

game_on = true
new_game = GamePlay.new

def win(new_game, game_on, player_one, player_two)
  winning = new_game.status
  game_on = false unless winning.zero?
  if winning == 0
    puts "#{player_one} has won"
  elsif winning = 2
    puts "#{player_two} has won"
  elsif winning = 3
    puts 'Its a tie'
  end
  game_on
end

# count = 0
while game_on
  puts "#{player_one} choose between 1 - 9"
  move_play = gets.chomp
  until validate(move_play)
    puts 'Enter valid move'
    move_play = gets.chomp
    break if validate(move_play)

  end
  #   board[move.to_i - 1] = 'X'
  display_board(board)
  # count += 1
  # win
  puts "#{player2.name} choose between 1 - 9"
  move_play = gets.chomp
  until validate(move_play)
    puts 'Enter valid move'
    move_play = gets.chomp
    break if validate(move_play)
  end
  #   board[move.to_i - 1] = 'O'
  display_board(board)
  game_on = win(new_game, game_on, player_one, player_two)
  
  # count += 1
  # win
  #   game_on = false unless win.zero?
end