#!/usr/bin/env ruby
require_relative '../lib/player'
require_relative '../lib/gameplay'
# User Interface
puts "WELCOME TO RUBY'S TIC TAC TOE GAME"

puts 'Enter Player One name:'
player_one = gets.chomp
player1 = Player.new(player_one, 'X')
puts "Hello #{player1.name} you will be playing with #{player1.symbol}."

puts 'Enter Player Two name:'
player_two = gets.chomp
player2 = Player.new(player_two, 'O')
puts "Hello #{player_two} you will be playing with #{player2.symbol}."

# def player_info(player1, player2)
#   puts "PLayer 1 is #{player1.name} and symbol is #{player1.symbol}"
#   puts "PLayer 2 is #{player2.name} and symbol is #{player2.symbol}"
# end

# player_info(player1, player2)


# def validate(move_play)
#   move_play = move_play.to_i
#   if move_play < 10 && move_play.positive?
#     true
#   else
#     false
#   end
# end

# Board
def display_board(new_board)
  user_input = []
  new_board.each do |x|
    if x.is_a? Integer and x.zero?
      user_input.push(' ')
    else
      user_input.push(x)
    end
  end
  puts " #{user_input[0]} | #{user_input[1]} | #{user_input[2]} "
  puts '-----------'
  puts " #{user_input[3]} | #{user_input[4]} | #{user_input[5]} "
  puts '-----------'
  puts " #{user_input[6]} | #{user_input[7]} | #{user_input[8]} "
end
board = []
9.times { board.push(0) }



# board = %w[0 0 0 0 0 0 0 0 0]
# display_board(board)

game_on = true
new_game = GamePlay.new

def win(new_game, game_on)
  winning = new_game.status
  game_on = false unless winning.zero?
  if winning == 1
    puts "Player 1 has won"
  elsif winning == 2
    puts "Player 2 has won"
  else winning == 3
    puts "Its is a tie"
  end
  game_on
end

# count = 0
while game_on
  puts "#{player1.name} choose between 1 - 9"
  move_play = gets.chomp.to_i
  check_valid1 = new_game.validate(move_play)
  until check_valid1[0]
    puts 'Enter valid move'
    move_play = gets.chomp.to_i
    check_valid1 = new_game.validate(move_play)
    break if check_valid1[0]

  end
  new_game.board_update(move_play, player1.symbol)
  #   board[move.to_i - 1] = 'X'
  display_board(new_game.board)
  game_on = win(new_game, game_on)
  break if !game_on 
  # win
  puts "#{player2.name} choose between 1 - 9"
  move_play2 = gets.chomp.to_i
  check_valid2 = new_game.validate(move_play2)
  until check_valid1[0]
    puts 'Enter valid move'
    move_play2 = gets.chomp.to_i
    check_valid2 = new_game.validate(move_play2)
    break if check_valid2[0]
  end
  new_game.board_update(move_play2, player2.symbol)
  #   board[move.to_i - 1] = 'O'
  display_board(new_game.board)
  game_on = win(new_game, game_on)
  # break if !game_on
  
  # count += 1
  # win
  #   game_on = false unless win.zero?
end